name: CrowdStrike ECS Fargate Demo

on:
  ## scheduled job at 5:30 UTC every sunday
  # schedule:
  #   - cron: '30 5 * * 0'
  ## on push
  push:
    branches: [ main ]
  ## manual trigger
  workflow_dispatch:

# permissions:
#       id-token: write
#       contents: read
#       security-events: write

jobs:
  crowdstrike-ecs-fargate-demo:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com
      FALCON_IMAGE: ecs-pipeline-demo/falcon-sensor:7.10.0-4906.container.x86_64.Release.US-1
      ECR_REPO: ecs-pipeline-demo/app-images
      GITHUB_SHA: ${{ github.sha }}
      FCS_IAC_ZIP: fcs_0.34.0_Linux_x86_64.tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: ECR Login
      uses: aws-actions/amazon-ecr-login@v2

    # # Patch ECS Task Definition Format (sed used to prevent commiting AWS Account ID)
    # - name: Patch ECS Task Defintion with CrowdStrike Falcon ECS Patching utility
    #   run: |
    #     sed -i 's/#AWSACCOUNTID#/${{ secrets.AWS_ACCOUNT_ID }}/g' taskdefinition.json
    #     docker run \
    #     --mount type=bind,source=$(pwd)/taskdefinition.json,target=/root/taskdefinition.json \
    #     --rm $ECR_REGISTRY/$FALCON_IMAGE \
    #     -cid ${{ secrets.FALCON_CID }} \
    #     -image $ECR_REGISTRY/$FALCON_IMAGE \
    #     -pulltoken $(echo "{\"auths\":{\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com\":{\"auth\":\"$(echo AWS:$(aws ecr get-login-password)|base64 -w 0)\"}}}" | base64 -w 0) \
    #     -ecs-spec-file /root/taskdefinition.json > taskdefinitionwithfalcon.json
    #     cat taskdefinitionwithfalcon.json
